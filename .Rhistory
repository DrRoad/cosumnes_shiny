library(RSQLite)
library(DBI)
library(tidyverse)
library(stringr)
# connect to SQLite database that Solinist regularly updates
db <- dbConnect(SQLite(), dbname = "C:/Users/rpauloo/Documents/LevelSender/db/levelsender.sqlite")
# list tables
db_tables <- dbListTables(db)
db_tables
dbReadTable(db, "ConfigEmailSetup")
dbReadTable(db, "ReceivedEmail")
table_list <- lapply(db_tables, function(x) { dbReadTable(db, x) } )
table_list[[8]]
dbReadTable(db, "ReceivedEmail")
dbReadTable(db, "ReceivedEmail") %>%
select(ReceivedDate, Subject, Body)
dbReadTable(db, "ReceivedEmail") %>% select(ReceivedDate) %>% tail()
dbReadTable(db, "ReceivedEmail") %>%
select(ReceivedDate, Subject, Body)
dbDisconnect(db)
install.packages("scales")
# load libraries
library(cdata)
library(ggplot2)
library(data.table)
library(tidyr)
library(reshape)
library(reshape2)
library(microbenchmark)
library(ggplot2)
# create small and large data sets
# small data
dat_small <- data.frame(
name = rep(c("firstName", "secondName"), each=4),
numbers = rep(1:4, 2),
value = rnorm(8)
)
# large data
dat_large <- data.frame(
name = rep(c("firstName"), times=1000),
numbers = rnorm(1000),
value = rnorm(1000)
)
pivotControlTable <-
build_pivot_control(table = dat_large, # reference to dataset
columnToTakeKeysFrom = 'numbers', # this will become column headers
columnToTakeValuesFrom = 'value', # this contains data
sep="_")
as.data.table(dat_large) -> temp
aggregate = aggregate(value ~ name, dat_large, I)
aggregate
aggregate %>% View()
aggregate(value ~ name, dat_large, I)
aggregate(value ~ name, dat_large, I) %>% View()
dat_large
aggregate(value ~ name, dat_small, I) %>% View()
dat_small %>% View()
aggregate(value ~ name, dat_small, I) %>% View()
base::aggregate(value ~ name, dat_small, I) %>% View()
stats::aggregate(value ~ name, dat_small, I) %>% View()
dat1 <- data.frame(
name = rep(c("firstName", "secondName"), each=4),
numbers = rep(1:4, 2),
value = rnorm(8)
)
dat1
aggregate(value ~ name, dat1, I)
?aggregate
library(cdata)
library(ggplot2)
library(data.table)
library(tidyr)
library(reshape)
library(reshape2)
library(microbenchmark)
library(ggplot2)
# create small and large data sets
# small data
dat_small <- data.frame(
name = rep(c("firstName", "secondName"), each=4),
numbers = rep(1:4, 2),
value = rnorm(8)
)
# large data
dat_large <- data.frame(
name = rep(c("firstName"), times=1000),
numbers = rnorm(1000),
value = rnorm(1000)
)
pivotControlTable <-
build_pivot_control(table = dat_small, # reference to dataset
columnToTakeKeysFrom = 'numbers', # this will become column headers
columnToTakeValuesFrom = 'value', # this contains data
sep="_")
as.data.table(dat_small) -> temp
mbm_1 <- microbenchmark(
reshape = stats::reshape(dat_small, idvar = "name", timevar = "numbers", direction = "wide"),
xtabs = stats::xtabs(value ~ name + numbers, data = dat_small),
unstack = unstack(dat_small, form = value ~ numbers),
cdata = cdata::blocks_to_rowrecs(tallTable =  dat_small,
keyColumns = c('name'),
controlTable = pivotControlTable),
data_table = data.table::dcast(temp, name ~ numbers, value.var = "value"),
spread = tidyr::spread(dat_small, key = numbers, value = value),
cast = reshape::cast(dat_small, name ~ numbers),
dcast = reshape2::dcast(dat_small, name ~ numbers),
times=100
)
autoplot(mbm_1) -> mbm_small
# large data
pivotControlTable <-
build_pivot_control(table = dat_large, # reference to dataset
columnToTakeKeysFrom = 'numbers', # this will become column headers
columnToTakeValuesFrom = 'value', # this contains data
sep="_")
as.data.table(dat_large) -> temp
mbm_2 <- microbenchmark(
reshape = stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide"),
xtabs = stats::xtabs(value ~ name + numbers, data = dat_large),
unstack = unstack(dat_large, form = value ~ numbers),
cdata = cdata::blocks_to_rowrecs(tallTable =  dat_large,
keyColumns = c('name'),
controlTable = pivotControlTable),
data_table = data.table::dcast(temp, name ~ numbers, value.var = "value"),
spread = tidyr::spread(dat_large, key = numbers, value = value),
cast = reshape::cast(dat_large, name ~ numbers),
dcast = reshape2::dcast(dat_large, name ~ numbers),
times=100
)
autoplot(mbm_2) -> mbm_large
mbm_small
mbm_large
reshape2::dcast(dat_large, name ~ numbers)
data.table::dcast(temp, name ~ numbers, value.var = "value" %>% str()
data.table::dcast(temp, name ~ numbers, value.var = "value") %>% str()
data.table::dcast(temp, name ~ numbers, value.var = "value")%>% str()
data.table::dcast(temp, name ~ numbers, value.var = "value")
as.data.table(dat_small) -> temp
data.table::dcast(temp, name ~ numbers, value.var = "value")
stats::reshape(dat_small, idvar = "name", timevar = "numbers", direction = "wide")
stats::xtabs(value ~ name + numbers, data = dat_small)
unstack(dat_small, form = value ~ numbers)
cdata::blocks_to_rowrecs(tallTable =  dat_small,
keyColumns = c('name'),
controlTable = pivotControlTable)
data.table::dcast(temp, name ~ numbers, value.var = "value")
tidyr::spread(dat_small, key = numbers, value = value)
reshape::cast(dat_small, name ~ numbers)
reshape2::dcast(dat_small, name ~ numbers)
unstack(dat_small, form = value ~ numbers) %>% rownames() <- unique(dat_small$name)
rownames(unstack(dat_small, form = value ~ numbers)) <- unique(dat_small$name)
rownames(base::unstack(dat_small, form = value ~ numbers)) <- unique(dat_small$name)
rownames(stats::unstack(dat_small, form = value ~ numbers)) <- unique(dat_small$name)
unstack(dat_small, form = value ~ numbers) %>% rownames(.) <- unique(dat_small$name)
library(dplyr)
unstack(dat_small, form = value ~ numbers) %>% rownames(.) <- unique(dat_small$name)
library(magrittr)
unstack(dat_small, form = value ~ numbers) %>% rownames(.) <- unique(dat_small$name)
unstack(dat_small, form = value ~ numbers) %>% rownames(.) = unique(dat_small$name)
unstack(dat_small, form = value ~ numbers) %>% rownames() = unique(dat_small$name)
unique(dat_small$name)
unstack(dat_small, form = value ~ numbers)
data.table::dcast(temp, name ~ numbers, value.var = "value")
tidyr::spread(dat_small, key = numbers, value = value)
reshape::cast(dat_small, name ~ numbers)
reshape2::dcast(dat_small, name ~ numbers)
stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide") %>% ncol()
stats::xtabs(value ~ name + numbers, data = dat_large)%>% ncol()
unstack(dat_large, form = value ~ numbers)%>% ncol()
tidyr::spread(dat_large, key = numbers, value = value)%>% ncol()
reshape::cast(dat_large, name ~ numbers)%>% ncol()
reshape2::dcast(dat_large, name ~ numbers)%>% ncol()
dat_large <- data.frame(
name = rep(c("firstName","secondName"), times=500),
numbers = rnorm(1000),
value = rnorm(1000)
)
as.data.table(dat_large) -> temp
stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide") %>% ncol()
stats::xtabs(value ~ name + numbers, data = dat_large)%>% ncol()
unstack(dat_large, form = value ~ numbers)%>% ncol()
tidyr::spread(dat_large, key = numbers, value = value)%>% ncol()
reshape::cast(dat_large, name ~ numbers)%>% ncol()
reshape2::dcast(dat_large, name ~ numbers)%>% ncol()
unstack(dat_large, form = value ~ numbers)
unstack(dat_large, form = value ~ numbers)%>% head()
stats::xtabs(value ~ name + numbers, data = dat_large)
stats::xtabs(value ~ name + numbers, data = dat_large)%>% ncol()
stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide")
dat_large <- data.frame(
name = rep(c("firstName","secondName"), times=500),
numbers = rep(1:5, 200),
value = rep(1:5, 200)
)
as.data.table(dat_large) -> temp
stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide") %>% ncol()
stats::xtabs(value ~ name + numbers, data = dat_large)%>% ncol()
stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide") %>% ncol()
stats::reshape(dat_large, idvar = "name", timevar = "numbers", direction = "wide")
?stats::reshape
stats::xtabs(value ~ name + numbers, data = dat_large)%>% ncol()
tidyr::spread(dat_large, key = numbers, value = value)%>% ncol()
reshape::cast(dat_large, name ~ numbers)%>% ncol()
reshape2::dcast(dat_large, name ~ numbers)%>% ncol()
reshape2::dcast(dat_large, name ~ numbers)
dat_large <- data.frame(
name = rep(c("firstName","secondName"), times=500),
numbers = rep(1:5, 200),
value = rep(1:5, 200)
)
dat_large
reshape2::dcast(dat_large, name ~ numbers)%>% ncol()
reshape2::dcast(dat_large, name ~ numbers)
reshape::cast(dat_large, name ~ numbers)
tidyr::spread(dat_large, key = numbers, value = value)
unstack(dat_large, form = value ~ numbers)
m = matrix(NA,nrow = 100)
for(i in 1:100){
m[i, 1] = (1 + 1/i)^i
}
m
(1 + 1/100000000000)^100000000000
(1 + 1/10000000000000000000000)^10000000000000000000000
(1 + 1/10000000000000000000)^10000000000000000000
(1 + 1/100000000000000000)^100000000000000000
(1 + 1/1000000000000000)^1000000000000000
(1 + 1/10000000000000)^1000000000000
(1 + 1/10000000000000)^10000000000000
(1 + 1/100000000000000)^100000000000000
(1 + 1/1000000000000000)^1000000000000000
(1 + 1/100000000000000)^100000000000000
data.frame(subject = c("A","A","A","B","B","B"),
letency = c(25,24,25,22,24,23))
data.frame(subject = c("A","A","A","B","B","B"),
letency = c(25,24,25,22,24,23)) -> d
d %>% count(subject) -> n
n
rep(T,n$n)
rep('T',n$n)
n$n
seq(1:n$n)
lapply(n$n, seq, 1)
n
lapply(n$n, seq)
lapply(n$n, seq) -> my_list
my_list
lapply("T", paste0, my_list)
lapply(my_list, paste0, "T")
lapply(my_list, paste0, .="T")
?paste0
lapply(my_list, paste0, "T") -> t_list
t_list
lapply(t_list, rev)
lapply(n$n, seq, paste0, "t") -> my_list
my_list
t_list
my_list
lapply(my_list,function(x){paste("T", x)})
lapply(my_list,function(x){paste0("T", x)})
lapply(my_list,function(x){paste0("T", x)}) -> t_list
t_list
do.call(c, t_list)
d$trial <- do.call(c, t_list)
d
data.frame(subject = c("A","A","A","B","B","B","C","D","D"),
letency = c(25,24,25,22,24,23,34,54)) -> d
data.frame(subject = c("A","A","A","B","B","B","C","D","D"),
letency = c(25,24,25,22,24,23,34,54,34)) -> d
d %>% count(subject) -> n
n
lapply(n$n, seq) -> my_list
my_list
lapply(my_list,function(x){paste0("T", x)}) -> t_list
t_list
d$trial <- do.call(c, t_list)
d
